name: setup_repo
# this workflow sets up your repo, run this before first release
on:
  # only on dispatch
  workflow_dispatch:

permissions: write-all

env:
  GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
  GITHUB_OWNER: ${{ github.repository_owner }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: nicknovitski/nix-develop@v1.1.0
        with:
          arguments: |
            --ignore-environment \
            --extra-experimental-features nix-command \
            --extra-experimental-features flakes \
            --keep HOME \
            --keep SSH_AUTH_SOCK \
            --keep GITHUB_TOKEN \
            --keep GITHUB_OWNER \
            --keep AWS_ROLE \
            --keep AWS_REGION \
            --keep AWS_DEFAULT_REGION \
            --keep AWS_ACCESS_KEY_ID \
            --keep AWS_SECRET_ACCESS_KEY \
            --keep AWS_SESSION_TOKEN \
            --keep TERM \
            ${{ github.workspace }}
      # if using OICD auth
      - uses: aws-actions/configure-aws-credentials@v4
        if: ${{vars.AWS_AUTH == 'OIDC'}}
        with:
          role-to-assume: ${{secrets.AWS_ROLE}}
          role-session-name: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
          aws-region: ${{secrets.AWS_REGION}}
      # if using access key auth
      - uses: aws-actions/configure-aws-credentials@v4
        if: ${{vars.AWS_AUTH == 'IAM'}}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - uses: haythem/public-ip@v1.3
        id: ip
      - run: |
          echo "Setting up Repo..."
          if [ -z "$GITHUB_TOKEN" ]; then echo "token not found, please make sure to add ADMIN_GITHUB_TOKEN to secrets"; exit 1; fi
          if [ -z "${{vars.AWS_AUTH}}" ]; then echo "AWS auth type not found, please specify AWS_AUTH action variable as either 'OIDC' or 'IAM'"; exit 1; fi
          git config --global user.name 'automation'
          git config --global user.email 'automation@users.noreply.github.com'
          git remote set-url origin "https://x-access-token:$GITHUB_TOKEN@github.com/${{github.repository}}"

          echo "generate AGE key and save public key tro recipients..."
          cd ${{github.workspace}}
          if [ "" = "${{secrets.AGE_SECRET_KEY}}" ]; then
            KEY="$(age-keygen 2>/dev/null | grep '^AGE')"
            echo "$KEY" | age-keygen -y >> age_recipients.txt
            gh secret set AGE_SECRET_KEY --body "$KEY"
            git add ${{github.workspace}}/age_recipients.txt
          fi

          echo "add ssh key for ci access..."
          cd ${{github.workspace}}/phase_2_ci_access
          if [ ! -f ssh_key.age ]; then
            # generate an rsa ssh key pair and encrypt public and private keys
            ssh-keygen -t rsa -b 4096 -C "automation@users.noreply.github.com" -N "" -f ssh_key && rm -f ssh_key.age; age -e -R ${{github.workspace}}/age_recipients.txt -o ssh_key.age ssh_key && rm -f ssh_key;
            rm -f ssh_key.pub.age; age -e -R ${{github.workspace}}/age_recipients.txt -o ssh_key.pub.age ssh_key.pub && rm -f ssh_key.pub;
            git add ${{github.workspace}}/phase_2_ci_access/ssh_key.pub.age
            git add ${{github.workspace}}/phase_2_ci_access/ssh_key.age
            cp ${{github.workspace}}/phase_2_ci_access/ssh_key.pub.age  ${{github.workspace}}/phase_3_prototype/ssh_key.pub.age
            cp ${{github.workspace}}/phase_2_ci_access/ssh_key.age  ${{github.workspace}}/phase_3_prototype/ssh_key.age
            git add ${{github.workspace}}/phase_3_prototype/ssh_key.pub.age
            git add ${{github.workspace}}/phase_3_prototype/ssh_key.age
          fi

          echo "use tf to configure repo settings..."
          cd ${{github.workspace}}/setup
          terraform init && terraform apply --auto-approve
          
          cd ${{github.workspace}}

          echo "Saving initial states..."
          for lc in phase_1_project_access phase_2_ci_access phase_3_prototype phase_4_servers; do
            cd ${{github.workspace}}/$lc
            if [ ! -f terraform.tfstate.age ]; then
              if [ ! -f terraform.tfstate ]; then
                echo '{"version": 4,"serial": 3,"outputs": {},"resources": [],"check_results": null}' > terraform.tfstate
              fi;
              age -e -R ${{github.workspace}}/age_recipients.txt -o terraform.tfstate.age terraform.tfstate
              git add ${{github.workspace}}/$lc/terraform.tfstate.age
            fi;
          done

          git commit -s -m "Setup https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          git push origin main
