name: release
# this will automatically run when something is merged to main
# please see google-github-actions/release-please-action for more information: https://github.com/google-github-actions/release-please-action
on:
  push:
    branches:
    - main

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  GITHUB_OWNER: ${{github.repository_owner}}
  project_name: "livex"
  project_owner: "tf-livex@noreply.com"
  project_cidr: "10.0.255.0/24"
  prototype_subnet_cidr: "10.0.255.224/28" # must be within project_cidr
  production_subnet_cidr: "10.0.255.208/28" # must be within project_cidr and not be the same as the prototype

permissions: write-all

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{env.project_name}}
      project_owner: ${{env.project_owner}}
      project_cidr: ${{env.project_cidr}}
      prototype_subnet_cidr: ${{env.prototype_subnet_cidr}}
      production_subnet_cidr: ${{env.production_subnet_cidr}}
      ci_ssh_key: ${{steps.setup.outputs.ssh_key}}
      workspace: ${{steps.setup.outputs.workspace}}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: nicknovitski/nix-develop@v1.1.0
        with:
          arguments: |
            --ignore-environment \
            --extra-experimental-features nix-command \
            --extra-experimental-features flakes \
            --keep HOME \
            --keep SSH_AUTH_SOCK \
            --keep GITHUB_TOKEN \
            --keep AWS_ROLE \
            --keep AWS_REGION \
            --keep AWS_DEFAULT_REGION \
            --keep AWS_ACCESS_KEY_ID \
            --keep AWS_SECRET_ACCESS_KEY \
            --keep AWS_SESSION_TOKEN \
            --keep TERM \
            ${{ github.workspace }}
      - name: setup
        id: setup
        run: |
          while read -r file; do
            if [ -f "$file.age" ]; then
              echo '${{secrets.AGE_SECRET_KEY}}' | age -d -i - -o "$file" "$file.age"
            fi
          done <secret_file_list.txt
          KEY="$(cat ${{github.workspace}}/phase_2_ci_access/ssh_key.pub)"
          echo "ssh_key=$KEY" >> "$GITHUB_OUTPUT"
          echo "workspace=${{github.workspace}}" >> "$GITHUB_OUTPUT"

  release:
    runs-on: ubuntu-latest
    needs:
      - env
    outputs:
      release_created: ${{steps.release-please.outputs.releases_created == 'true' && 'true' || 'false'}}
      pr_created: ${{steps.release-please.outputs.prs_created == 'true' && 'true' || 'false'}}
      pr: steps.release-please.outputs.pr
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release-please
        with:
          release-type: terraform-module

  plan_project_access:
    needs:
      - env
      - release
    uses: ./.github/workflows/reusable-plan.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'skip' || 'phase_1_project_access'}}
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "project_cidr": "${{needs.env.outputs.project_cidr}}"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}


  plan_ci_access:
    needs:
      - env
      - release
    uses: ./.github/workflows/reusable-plan.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'skip' || 'phase_2_ci_access'}}
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "vpc_name": "${{needs.env.outputs.project_name}}",
          "ssh_key": "${{needs.env.outputs.ci_ssh_key}}"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}

  plan_prototype:
    needs:
      - env
      - release
    uses: ./.github/workflows/reusable-plan.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'skip' || 'phase_3_prototype'}}
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "ssh_key_name": "${{needs.env.outputs.project_name}}",
          "vpc_name": "${{needs.env.outputs.project_name}}",
          "subnet_cidr": "${{needs.env.outputs.prototype_subnet_cidr}}"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}

  plan_servers:
    needs:
      - env
      - release
    uses: ./.github/workflows/reusable-plan.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'skip' || 'phase_4_servers'}}
      # these variables be saved in the proper directory after the first release (terraform.tfvars.json)
      # at which point the variables in the plan will no longer be used
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "vpc_name": "${{needs.env.outputs.project_name}}",
          "subnet_cidr": "${{needs.env.outputs.production_subnet_cidr}}",
          "image_id": "fake",
          "image_admin_group": "wheel",
          "image_user": "plan",
          "image_workfolder": "~",
          "role": "server"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}

# these are only run after release is created
  apply_project_access:
    needs:
      - env
      - release
    uses: ./.github/workflows/reusable-apply.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'phase_1_project_access' || 'skip'}}
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "project_cidr": "${{needs.env.outputs.project_cidr}}"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}

  apply_ci_access:
    needs:
      - env
      - release
      - apply_project_access
    uses: ./.github/workflows/reusable-apply.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'phase_2_ci_access' || 'skip'}}
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "ssh_key": "${{needs.env.outputs.ci_ssh_key}}",
          "vpc_name": "${{fromJSON(needs.apply_project_access.outputs.output).vpc.value}}"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}


  apply_prototype:
    needs:
      - env
      - release
      - apply_project_access
      - apply_ci_access
    uses: ./.github/workflows/reusable-apply.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'phase_3_prototype' || 'skip'}}
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "ssh_key_name": "${{fromJSON(needs.apply_ci_access.outputs.output).ssh_key_name.value}}",
          "vpc_name": "${{fromJSON(needs.apply_project_access.outputs.output).vpc.value}}",
          "subnet_cidr": "${{needs.env.outputs.prototype_subnet_cidr}}"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}

  apply_servers:
    needs:
      - env
      - release
      - apply_project_access
      - apply_ci_access
      - apply_prototype
    uses: ./.github/workflows/reusable-apply.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'phase_4_servers' || 'skip'}}
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "vpc_name": "${{fromJSON(needs.apply_project_access.outputs.output).vpc.value}}",
          "subnet_cidr": "${{needs.env.outputs.production_subnet_cidr}}",
          "image_id": "${{fromJSON(needs.apply_prototype.outputs.output).image_id.value}}",
          "image_admin_group": "${{fromJSON(needs.apply_prototype.outputs.output).image_admin_group.value}}",
          "image_user": "${{fromJSON(needs.apply_prototype.outputs.output).image_user.value}}",
          "image_workfolder": "${{fromJSON(needs.apply_prototype.outputs.output).image_workfolder.value}}",
          "role": "${{fromJSON(needs.apply_prototype.outputs.output).role.value}}"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}

  # destroy CI Access after updating servers
  destroy_ci_access:
    needs:
      - env
      - release
      - apply_project_access
      - apply_ci_access
      - apply_prototype
      - apply_servers
    uses: ./.github/workflows/reusable-destroy.yaml
    with:
      aws-auth-type: ${{vars.AWS_AUTH}}
      repository: ${{github.repository}}
      workspace: ${{needs.env.outputs.workspace}}
      run-id: ${{github.run_id}}
      directory: ${{endsWith(needs.release.outputs.release_created,'true') && 'phase_2_ci_access' || 'skip'}}
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "vpc_name": "${{fromJSON(needs.apply_project_access.outputs.output).vpc.value}}"
        }
    secrets:
      aws-region: ${{secrets.AWS_REGION}}
      aws-role: ${{secrets.AWS_ROLE}}
      aws-session: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
      aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      github-token: ${{secrets.GITHUB_TOKEN}}
      age-secret-key: ${{secrets.AGE_SECRET_KEY}}
